{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code># \ud83c\udf3f PlantVarFilter\n\n**PlantVarFilter** is a Python-based toolkit for filtering, annotating, and analyzing plant genomic variants (VCF), linking them with gene annotations (GFF3) and trait scores for basic GWAS analysis.\n\n&gt; \u26a0\ufe0f Requires Python 3.12+\n&gt; \n&gt; \ud83e\uddea Current Version: 0.1.0  \n&gt; \ud83d\ude80 Future versions will include interactive UIs, advanced GWAS models, and full automation for agricultural bioinformatics.\n\n---\n\n## \ud83d\udd27 Features\n\n- Filter variants by consequence types (e.g. missense, stop_gained, synonymous)\n- Include or exclude intergenic variants\n- Annotate genes using GFF3\n- Link gene variants with phenotypic trait scores\n- Run basic GWAS analysis using two-sample t-tests\n- Visualize results (pie chart for variant types, bar chart for consequence types, Manhattan plot for GWAS)\n- Output formats supported: CSV, TSV, JSON, XLSX, Feather\n- Supports modular execution: full pipeline or plotting-only mode\n- Works well with compressed `.vcf.gz` and `.gff3.gz` files\n- Automatically builds local gene databases and logs all actions\n\n---\n\n## \ud83d\udcca Real Use Case Example\n\nA sample analysis using mock variant and trait data:\n\n### Initialize a project folder:\n```bash\nplantvarfilter init ~/Desktop/PlantTestRun\n</code></pre>"},{"location":"#add-your-input-files-into-the-input-directory","title":"Add your input files into the <code>input/</code> directory:","text":"<ul> <li><code>expanded_variants.vcf.gz</code></li> <li><code>expanded_annotations.gff3.gz</code></li> <li><code>expanded_traits.csv</code></li> </ul>"},{"location":"#configure-the-pipeline-by-editing-configjson","title":"Configure the pipeline by editing <code>config.json</code>:","text":"<pre><code>{\n  \"vcf\": \"input/expanded_variants.vcf.gz\",\n  \"gff\": \"input/expanded_annotations.gff3.gz\",\n  \"traits\": \"input/expanded_traits.csv\",\n  \"include_intergenic\": true,\n  \"consequence_types\": [\"MODERATE\", \"HIGH\", \"LOW\", \"MODIFIER\"],\n  \"output_format\": \"csv\",\n  \"output\": \"output/filtered_variants.csv\",\n  \"plot\": true,\n  \"gwas\": true,\n  \"output_dir\": \"output\"\n}\n</code></pre>"},{"location":"#run-the-full-analysis","title":"Run the full analysis:","text":"<pre><code>plantvarfilter run --config ~/Desktop/PlantTestRun/config.json\n</code></pre>"},{"location":"#sample-output","title":"Sample Output:","text":"<ul> <li><code>filtered_variants.csv</code>: filtered annotated variants</li> <li><code>gwas_basic_results.csv</code>: GWAS results</li> <li>Plots in <code>/output/</code> folder</li> </ul> <p>You can also run plotting only later using: <pre><code>plantvarfilter plot-only --config ~/Desktop/PlantTestRun/config.json\n</code></pre></p>"},{"location":"#documentation-pages","title":"\ud83c\udf10 Documentation Pages","text":"<ul> <li><code>usage.md</code>: Full CLI usage and commands</li> <li><code>config.md</code>: All configuration fields explained</li> <li><code>gallery.md</code>: Sample visualization output ```</li> </ul>"},{"location":"config/","title":"Config","text":"<pre><code># \u2699\ufe0f Configuration File (config.json)\n\nPlantVarFilter uses a JSON file to control behavior of the pipeline.\n\n## \ud83c\udf3f Example\n```json\n{\n  \"vcf\": \"input/data.vcf.gz\",\n  \"gff\": \"input/annotation.gff3.gz\",\n  \"traits\": \"input/traits.csv\",\n  \"include_intergenic\": true,\n  \"consequence_types\": [\"MODERATE\", \"HIGH\", \"LOW\", \"MODIFIER\"],\n  \"output_format\": \"csv\",\n  \"output_dir\": \"output/\",\n  \"plot\": true,\n  \"gwas\": true\n}\n</code></pre>"},{"location":"config/#parameter-breakdown","title":"\ud83d\udd0d Parameter Breakdown","text":"Field Description <code>vcf</code> Compressed VCF file with variant calls <code>gff</code> GFF3 file with gene annotations <code>traits</code> CSV linking genes to trait scores <code>include_intergenic</code> Whether to include non-coding variants <code>consequence_types</code> List of variant consequences to include <code>output_format</code> Output type: csv, tsv, json, feather, xlsx <code>output_dir</code> Path to save output files <code>plot</code> Whether to auto-generate plots <code>gwas</code> Run basic GWAS t-test <code>output</code> (Optional) Path for filtered result <code>plot_only</code> If true, skip filtering and use GWAS file directly <code>gwas_results</code> Path to a GWAS result CSV file (for plotting only) ```"},{"location":"gallery/","title":"\ud83d\udcca Output Gallery","text":""},{"location":"gallery/#variant-consequence-distribution","title":"\ud83e\uddec Variant Consequence Distribution","text":""},{"location":"gallery/#variant-type-pie-chart","title":"\ud83e\udd67 Variant Type Pie Chart","text":""},{"location":"gallery/#manhattan-plot-gwas","title":"\ud83c\udf04 Manhattan Plot (GWAS)","text":""},{"location":"usage/","title":"Usage","text":"<p><pre><code># \ud83d\ude80 Usage Guide\n\n## == Initialize Project ==\n```bash\nplantvarfilter init ~/Desktop/PlantTestRun\n</code></pre> Creates a structured folder: - <code>input/</code>: for input data - <code>output/</code>: stores results and plots - <code>config.json</code>: main configuration file</p>"},{"location":"usage/#run-full-pipeline","title":"== Run Full Pipeline ==","text":"<p><pre><code>plantvarfilter run --config ~/Desktop/PlantTestRun/config.json\n</code></pre> Performs: - VCF parsing and filtering - GFF3-based annotation - Trait association - t-test based GWAS - Plot generation (optional)</p>"},{"location":"usage/#plotting-only-mode","title":"== Plotting Only Mode ==","text":"<p>If you only want to generate plots from a GWAS file: <pre><code>plantvarfilter plot-only --config ~/Desktop/PlantTestRun/config.json\n</code></pre> Config must include: <pre><code>{\n  \"plot_only\": true,\n  \"output_dir\": \"output/\",\n  \"gwas_results\": \"output/gwas_basic_results.csv\"\n}\n</code></pre> ```</p>"}]}